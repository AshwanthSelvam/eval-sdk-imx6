#/bin/sh

# Short-Description: Prepare demo touchscreen environment
# Description:       Probe the framebuffers to check for which touchscreens are connected to the board, and initialize the touchscreen environment appropriately

# Get x and y resolution from primary fb
probe_fb ()
{
  #fb=fb0 ; export fb ;
  fb=$1 ; export fb ;
  echo "Framebuffer $fb" ;

  res=`cat /sys/class/graphics/$fb/mode | sed -r 's/([^0-9]+)([0-9]+)x([0-9]+).*/\2\t\3/'`;
  if [ -z "$res" ]; then
    echo "Display /dev/$fb is not active" ;
    return 0 ;
  fi

  echo "Resolution $res" ;
  xres=`echo $res | awk '{ print $1 }'` ; export xres ;
  yres=`echo $res | awk '{ print $2 }'` ; export yres ;

  echo "Screen resolution: $xres x $yres" ;
  return 1 ;
}

# Find touchscreen type from screen dimensions
find_ts_type ()
{
  case "$xres"  in
    800)
      echo "WVGA display"
      tsdev=tsc2004 ;
      export tsdev;
      calib=/etc/pointercal.$tsdev
    ;;
    1024)
    case "$yres" in
      768)
        echo "XGA display"
        # Current kernel driver only supports multi-touch
        tsdev="eGalax Touch Screen"
        export tsdev
        calib=/etc/pointercal.egalax
      ;;
      600)
        echo "WSVGA display"
        tsdev=ft5x06
        export tsdev
        calib=/etc/pointercal.$tsdev
      ;;
    esac
    ;;
    *)
      echo "HDMI display"
      tsdev="Acer T230H" ;
      calib=/etc/pointercal.quanta
    ;;
  esac
}

# Find device node for touchscreen
find_ts_dev ()
{
  mousedev= ;
  tslibdev='';

  if ! [ -z "$tsdev" ]; then
    echo "Search for input device $tsdev" ;
    for evdev in /sys/class/input/event* ; do 
      name=`cat $evdev/device/name` ;
      if [ "$name" == "$tsdev" ]; then
        base=`basename $evdev` ;
        mousedev="tslib:/dev/input/$base"
        tslibdev="/dev/input/$base"
      fi
    done
  fi

  echo "Mouse device is $mousedev" ;
}

# Main procedure
init_ts ()
{
	
# Calibrate all attached Displays
for fb in fb0 fb1 fb2 fb3 fb4; do 

# Check for FrameBuffer
  probe_fb $fb
  if [ $? -eq 1 ]; then
	  find_ts_type
	  find_ts_dev
	  # Fall back to default Timesys detection of ts if it has not been
	  # found using the above methods
	  if [ -z $tslibdev ]; then
		tslibdev=`cat /etc/ts.dev`
	  fi 

	  # Send variable declarations 
	  export TSLIB_TSDEVICE=$tslibdev
	  export TSLIB_CALIBFILE=$calib
	  export TSLIB_FBDEVICE="/dev/$fb"
	  export QWS_MOUSE_PROTO=$mousedev
	  
	  # Calibrate touchscreen if no calibration found yet
	  if ! [ -f "$calib" ]; then
		ts_calibrate
	  fi

	  # Send variables to a script that will be run before demos
	  echo "#!/bin/sh" > /etc/demo-env-$fb.sh
	  echo "" >> /etc/demo-env-$fb.sh
	  echo "export TSLIB_CALIBFILE=$calib" >> /etc/demo-env-$fb.sh
	  echo "export QWS_MOUSE_PROTO=$mousedev" >> /etc/demo-env-$fb.sh
	  echo "export TSLIB_TSDEVICE=$tslibdev" >> /etc/demo-env-$fb.sh
	  
	fi
done  

}

case "$1" in
  start)  
    init_ts
  ;;
  stop)
  ;;
  *)
    $0 start
  ;;
esac   

