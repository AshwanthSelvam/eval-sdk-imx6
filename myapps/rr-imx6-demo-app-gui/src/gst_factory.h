/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p gst_factory -c GstFactory com.ridgerun.gstreamer.gstd.FactoryInterface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GST_FACTORY_H_1375806687
#define GST_FACTORY_H_1375806687

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.ridgerun.gstreamer.gstd.FactoryInterface
 */
class GstFactory: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.ridgerun.gstreamer.gstd.FactoryInterface"; }

public:
    GstFactory(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~GstFactory();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Create(const QString &description)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(description);
        return asyncCallWithArgumentList(QLatin1String("Create"), argumentList);
    }

    inline QDBusPendingReply<bool> Destroy(const QString &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path);
        return asyncCallWithArgumentList(QLatin1String("Destroy"), argumentList);
    }

    inline QDBusPendingReply<bool> DestroyAll()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("DestroyAll"), argumentList);
    }

    inline QDBusPendingReply<QStringList> List()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("List"), argumentList);
    }

    inline QDBusPendingReply<bool> Ping()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Ping"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Alive();
};

namespace com {
  namespace ridgerun {
    namespace gstreamer {
      namespace gstd {
        typedef ::GstFactory FactoryInterface;
      }
    }
  }
}
#endif
