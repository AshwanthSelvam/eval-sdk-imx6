/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p gst_pipeline -c GstPipeline com.ridgerun.gstreamer.gstd.PipelineInterface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef GST_PIPELINE_H_1375806645
#define GST_PIPELINE_H_1375806645

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.ridgerun.gstreamer.gstd.PipelineInterface
 */
class GstPipeline: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.ridgerun.gstreamer.gstd.PipelineInterface"; }

public:
    GstPipeline(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~GstPipeline();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void ElementAsyncSetState(const QString &element, int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(state);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("ElementAsyncSetState"), argumentList);
    }

    inline QDBusPendingReply<bool, bool> ElementGetPropertyBoolean(const QString &element, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("ElementGetPropertyBoolean"), argumentList);
    }
    inline QDBusReply<bool> ElementGetPropertyBoolean(const QString &element, const QString &property, bool &success)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ElementGetPropertyBoolean"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            success = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, QByteArray, bool> ElementGetPropertyBuffer(const QString &element, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("ElementGetPropertyBuffer"), argumentList);
    }
    inline QDBusReply<QString> ElementGetPropertyBuffer(const QString &element, const QString &property, QByteArray &data, bool &success)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ElementGetPropertyBuffer"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            data = qdbus_cast<QByteArray>(reply.arguments().at(1));
            success = qdbus_cast<bool>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<int, bool> ElementGetPropertyInt(const QString &element, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("ElementGetPropertyInt"), argumentList);
    }
    inline QDBusReply<int> ElementGetPropertyInt(const QString &element, const QString &property, bool &success)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ElementGetPropertyInt"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            success = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<qlonglong, bool> ElementGetPropertyInt64(const QString &element, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("ElementGetPropertyInt64"), argumentList);
    }
    inline QDBusReply<qlonglong> ElementGetPropertyInt64(const QString &element, const QString &property, bool &success)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ElementGetPropertyInt64"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            success = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, bool> ElementGetPropertyString(const QString &element, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("ElementGetPropertyString"), argumentList);
    }
    inline QDBusReply<QString> ElementGetPropertyString(const QString &element, const QString &property, bool &success)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ElementGetPropertyString"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            success = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<int> ElementGetState(const QString &element)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element);
        return asyncCallWithArgumentList(QLatin1String("ElementGetState"), argumentList);
    }

    inline QDBusPendingReply<bool> ElementSetPropertyBoolean(const QString &element, const QString &property, bool val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property) << QVariant::fromValue(val);
        return asyncCallWithArgumentList(QLatin1String("ElementSetPropertyBoolean"), argumentList);
    }

    inline QDBusPendingReply<bool> ElementSetPropertyInt(const QString &element, const QString &property, int val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property) << QVariant::fromValue(val);
        return asyncCallWithArgumentList(QLatin1String("ElementSetPropertyInt"), argumentList);
    }

    inline QDBusPendingReply<bool> ElementSetPropertyInt64(const QString &element, const QString &property, qlonglong val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property) << QVariant::fromValue(val);
        return asyncCallWithArgumentList(QLatin1String("ElementSetPropertyInt64"), argumentList);
    }

    inline QDBusPendingReply<bool> ElementSetPropertyString(const QString &element, const QString &property, const QString &val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(property) << QVariant::fromValue(val);
        return asyncCallWithArgumentList(QLatin1String("ElementSetPropertyString"), argumentList);
    }

    inline QDBusPendingReply<bool> ElementSetState(const QString &element, int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(element) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("ElementSetState"), argumentList);
    }

    inline QDBusPendingReply<bool> Ping()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Ping"), argumentList);
    }

    inline Q_NOREPLY void PipelineAbortAutoStop()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("PipelineAbortAutoStop"), argumentList);
    }

    inline Q_NOREPLY void PipelineAsyncSeek(qlonglong ipos_ns)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipos_ns);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("PipelineAsyncSeek"), argumentList);
    }

    inline Q_NOREPLY void PipelineAsyncSetState(int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("PipelineAsyncSetState"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> PipelineGetDuration()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PipelineGetDuration"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> PipelineGetId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PipelineGetId"), argumentList);
    }

    inline QDBusPendingReply<qlonglong> PipelineGetPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PipelineGetPosition"), argumentList);
    }

    inline QDBusPendingReply<int> PipelineGetState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PipelineGetState"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSeek(qlonglong ipos_ns)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipos_ns);
        return asyncCallWithArgumentList(QLatin1String("PipelineSeek"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSendCustomEvent(const QString &type, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("PipelineSendCustomEvent"), argumentList);
    }

    inline QDBusPendingReply<> PipelineSendEoS()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PipelineSendEoS"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSetAutoStop(qlonglong timeout_ms)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(timeout_ms);
        return asyncCallWithArgumentList(QLatin1String("PipelineSetAutoStop"), argumentList);
    }

    inline QDBusPendingReply<> PipelineSetId(qulonglong id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("PipelineSetId"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSetState(int state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("PipelineSetState"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSkip(qlonglong period_ns)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(period_ns);
        return asyncCallWithArgumentList(QLatin1String("PipelineSkip"), argumentList);
    }

    inline QDBusPendingReply<bool> PipelineSpeed(double newrate)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(newrate);
        return asyncCallWithArgumentList(QLatin1String("PipelineSpeed"), argumentList);
    }

    inline QDBusPendingReply<> PipelineStep(qulonglong frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("PipelineStep"), argumentList);
    }

    inline QDBusPendingReply<> SetWindowId(qulonglong winId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(winId);
        return asyncCallWithArgumentList(QLatin1String("SetWindowId"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void EoS(qulonglong pipe_id);
    void Error(qulonglong pipe_id, const QString &err_message);
    void QoS(qulonglong pipe_id, bool live, qulonglong running_time, qulonglong stream_time, qulonglong timestamp, qulonglong duration, qlonglong jitter, double proportion, int quality, int format, qulonglong processed, qulonglong dropped);
    void StateChanged(qulonglong pipe_id, int old_state, int new_state, const QString &src);
};

namespace com {
  namespace ridgerun {
    namespace gstreamer {
      namespace gstd {
        typedef ::GstPipeline PipelineInterface;
      }
    }
  }
}
#endif
